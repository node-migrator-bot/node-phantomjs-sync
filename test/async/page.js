// Generated by CoffeeScript 1.3.3
(function() {
  var Phantom, assert, bat, describe, express, fs, mode, path, t, temp, vows, _, _i, _len, _ref,
    __slice = [].slice;

  vows = require('vows');

  assert = require('assert');

  express = require('express');

  temp = require('temp');

  path = require('path');

  fs = require('fs');

  Phantom = require('../../lib/phantom-sync').Phantom;

  _ = require('underscore');

  describe = function(name, options) {
    return vows.describe(name).addBatch(bat(options))["export"](module);
  };

  t = function(fn) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      fn.apply(this, args);
    };
  };

  bat = function(options) {
    var app, phantom;
    app = express.createServer();
    app.get('/', function(req, res) {
      return res.send("<html>\n  <head>\n    <title>Test page title</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"somediv\">\n      <div class=\"anotherdiv\">Some page content</div>\n    </div>\n    <button class=\"clickme\" style=\"position: absolute; top: 123px; left: 123px; width: 20px; height; 20px\" onclick=\"window.i_got_clicked = true;\" />\n  </body>\n</html>");
    });
    app.listen();
    phantom = new Phantom(options);
    return {
      "A Phantom page": {
        topic: t(function() {
          var test;
          test = this;
          return phantom.create(function(p) {
            return p.createPage(function(page) {
              return test.callback(null, page, p);
            });
          });
        }),
        "can open a URL on localhost": {
          topic: t(function(page) {
            var _this = this;
            return page.open("http://127.0.0.1:" + (app.address().port) + "/", function(status) {
              return _this.callback(null, page, status);
            });
          }),
          "and succeed": function(err, page, status) {
            return assert.equal(status, "success");
          },
          "and the page, once it loads,": {
            topic: t(function(page) {
              var _this = this;
              return setTimeout(function() {
                return _this.callback(null, page);
              }, 1500);
            }),
            "has a title": {
              topic: t(function(page) {
                var _this = this;
                return page.evaluate((function() {
                  return document.title;
                }), function(title) {
                  return _this.callback(null, title);
                });
              }),
              "which is correct": function(title) {
                return assert.equal(title, "Test page title");
              }
            },
            "can inject Javascript from a file": {
              topic: t(function(page) {
                var _this = this;
                return page.injectJs('test/inject.js', function(success) {
                  return _this.callback(null, success);
                });
              }),
              "and succeed": function(success) {
                return assert.ok(success, "Injection should return true");
              }
            },
            "can evaluate DOM nodes": {
              topic: t(function(page) {
                var _this = this;
                return page.evaluate((function() {
                  return document.getElementById('somediv');
                }), function(node) {
                  return _this.callback(null, node);
                });
              }),
              "which match": function(node) {
                assert.equal(node.tagName, 'DIV');
                return assert.equal(node.id, 'somediv');
              }
            },
            "can evaluate scripts defined in the header": {
              topic: t(function(page) {
                var _this = this;
                return page.evaluate((function() {
                  return $('#somediv').html();
                }), function(html) {
                  return _this.callback(null, html);
                });
              }),
              "which return the correct result": function(html) {
                html = html.replace(/\s\s+/g, "");
                return assert.equal(html, '<div class="anotherdiv">Some page content</div>');
              }
            },
            "can set a nested property": {
              topic: t(function(page) {
                var _this = this;
                return page.set('settings.loadPlugins', true, function(oldVal) {
                  return _this.callback(null, page, oldVal);
                });
              }),
              "and get it again": {
                topic: t(function(page, oldVal) {
                  var _this = this;
                  return page.get('settings.loadPlugins', function(val) {
                    return _this.callback(null, oldVal, val);
                  });
                }),
                "and they match": function(_, oldVal, val) {
                  return assert.equal(oldVal, val);
                }
              }
            },
            "can simulate clicks on page locations": {
              topic: t(function(page) {
                var _this = this;
                page.sendEvent('click', 133, 133);
                return page.evaluate((function() {
                  return window.i_got_clicked;
                }), function(clicked) {
                  return _this.callback(null, clicked);
                });
              }),
              "and have those clicks register": function(clicked) {
                return assert.ok(clicked);
              }
            },
            "can register an onConsoleMessage handler": {
              topic: t(function(page) {
                var test;
                test = this;
                if (_.isEqual(options.mode, ['mixed', 'args'])) {
                  page.set('onConsoleMessage', (function(msg) {
                    return test.callback(null, msg);
                  }), function() {});
                  return page.evaluate((function() {
                    return console.log("Hello, world!");
                  }), function() {});
                } else {
                  page.set('onConsoleMessage', (function(msg) {
                    return test.callback(null, msg);
                  }));
                  return page.evaluate((function() {
                    return console.log("Hello, world!");
                  }));
                }
              }),
              "which works correctly": function(msg) {
                return assert.equal(msg, "Hello, world!");
              }
            },
            "can render the page to a file": {
              topic: t(function(page) {
                var fileName, test;
                test = this;
                fileName = temp.path({
                  suffix: '.png'
                });
                return page.render(fileName, function() {
                  return test.callback(null, fileName);
                });
              }),
              "which is created": function(fileName) {
                return assert.ok(fs.existsSync(fileName), "rendered image should exist");
              },
              teardown: function(fileName) {
                return fs.unlink(fileName);
              }
            }
          }
        },
        teardown: function(page, ph) {
          app.close();
          return ph.exit();
        }
      }
    };
  };

  _ref = ['async', ['mixed', 'args'], ['mixed', 'fibers']];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    mode = _ref[_i];
    describe("Pages (" + mode + ")", {
      mode: mode
    });
  }

}).call(this);
